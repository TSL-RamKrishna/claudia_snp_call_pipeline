#!/usr/bin/env rake

ENV["R1"] ? @read1 = ENV["R1"] : nil
ENV["R2"] ? @read2 = ENV["R2"] : nil

ENV["samplename"] ? @sample=ENV["samplename"] : nil
ENV["sampleid"] ? @sampleid=ENV["sampleid"] : nil
ENV["reference"] ? @reference=ENV["reference"] : nil

directory  "results"

desc "Do fastqc quality check of the input data reads"
namespace :fastqc  do

  directory  "results/#{@sample}"
  desc "do fastqc for R1"

  file "results/#{@sample}/#{@R1_basename}_fastqc.html" => [ "results/#{@sample}", "#{@read1}"] do
    sh "source fastqc-0.11.5; fastqc -outdir results/#{@sample} -extract #{@read1}"
  end
  file "results/#{@sample}/#{@R1_basename}_fastqc.zip" => [ "results/#{@sample}", "#{@read1}"] do
  end
  file "results/#{@sample}/#{@R1_basename}_fastqc" => [ "results/#{@sample}", "#{@read1}"] do
  end

  task :R1 => ["results/#{@sample}/#{@R1_basename}_fastqc.html", "results/#{@sample}/#{@R1_basename}_fastqc.zip", "results/#{@sample}/#{@R1_basename}_fastqc"] do
    puts "R1 FASTQC completed"
  end

  desc "do fastqc for R2"
  file "results/#{@sample}/#{@R2_basename}_fastqc.html" => [ "results/#{@sample}", "#{@read2}"] do
    sh "source fastqc-0.11.5;fastqc -outdir results/#{@sample} -extract #{@read2}"
  end
  file "results/#{@sample}/#{@R2_basename}_fastqc.zip" => [ "results/#{@sample}", "#{@read2}"] do
  end
  file "results/#{@sample}/#{@R2_basename}_fastqc" => [ "results/#{@sample}", "#{@read2}"] do
  end

  task :R2 => ["results/#{@sample}/#{@R2_basename}_fastqc.html", "results/#{@sample}/#{@R2_basename}_fastqc.zip", "results/#{@sample}/#{@R2_basename}_fastqc"] do
    puts "R2 FASTQC completed"
  end


  task :run => [ :R1, :R2 ] do
  end
end

amespace :trimmomatic do
  desc "Runs Trimmomatic quality trimming tool"

  file "results/#{@sample}/#{@R1_basename}.fastq" => ["#{@read1}"] do
    sh "source trimmomatic-0.36; source jre-1.7.0.11; trimmomatic SE -threads 2 -phred33 -trimlog results/#{@sample}/trimmomatic.log -quiet #{@read1} results/#{@sample}/#{@R1_basename}.fastq ILLUMINACLIP:/tsl/software/testing/trimmomatic/0.36/x86_64/share/trimmomatic/adapters/ilmn_adapters.fa:2:30:10 SLIDINGWINDOW:10:20 MINLEN:50"
  end

  file "results/#{@sample}/#{@R1_basename}_paired.fastq" => ["#{@read1}", "#{@read2}"] do
    sh "source trimmomatic-0.36; source jre-1.7.0.11; trimmomatic PE -threads 2 -phred33 -trimlog results/#{@sample}/trimmomatic.log -quiet #{@read1} #{@read2} results/#{@sample}/#{@R1_basename}_paired.fastq results/#{@sample}/#{@R1_basename}_unpaired.fastq results/#{@sample}/#{@R2_basename}_paired.fastq results/#{@sample}/#{@R2_basename}_unpaired.fastq ILLUMINACLIP:/tsl/software/testing/trimmomatic/0.36/x86_64/share/trimmomatic/adapters/ilmn_adapters.fa:2:30:10 SLIDINGWINDOW:10:20 MINLEN:50"
  end

  file "results/#{@sample}/#{@R2_basename}_paired.fastq" => ["#{@read1}", "#{@read2}"] do
  end


  task :runSE => ["results/#{@sample}/#{@R1_basename}.fastq"] do
    puts "Trimmomatic completed"
  end

  task :runPE => ["results/#{@sample}/#{@R1_basename}_paired.fastq", "results/#{@sample}/#{@R2_basename}_paired.fastq" ] do
    puts "Trimmomatic completed"
  end

end


namespace :BWAindex do
  desc "Creates BWA reference index"

  file "#{@reference}.amb" => ["#{@reference}"] do
    sh "source bwa-0.7.15; bwa index #{@reference}"
  end

  file "#{@reference}.ann" => ["#{@reference}"] do
  end

  file "#{@reference}.bwt" => ["#{@reference}"] do
  end

  file "#{@reference}.pac" => ["#{@reference}"] do
  end

  file "#{@reference}.sa" => ["#{@reference}"] do
  end

  task :run => ["#{@reference}.amb", "#{@reference}.ann", "#{@reference}.bwt", "#{@reference}.pac", "#{@reference}.sa"] do
    puts "Reference indexing completed"
  end


end

namespace :BWA do
  desc "Runs BWA alignment of reads to the reference"
  file "results/#{@sample}/aligned.sam" => ["results/#{@sample}/#{@R1_basename}_paired.fastq"] do
    sh "source bwa-0.7.15; bwa mem -t 3 #{@reference} results/#{@sample}/#{@R1_basename}_paired_trimmed.fastq  1>results/#{@sample}/aligned.sam 2>results/#{@sample}/bwa_align.log;"
  end

  task :run => ["BWAindex:run", "results/#{@sample}/aligned.sam"] do
    puts "bwa alignment completed"
  end
end

namespace :BowtieIndex do
 file "#{@reference}.1.bt2" => ["#{@reference}"] do
   sh "source bowtie2-2.1.0;  bowtie2-build -f   #{@reference}  #{@reference} "
 end
 file "#{@reference}.2.bt2" => ["#{@reference}"] do
 end
 file "#{@reference}.3.bt2" => ["#{@reference}"] do
 end
 file "#{@reference}.4.bt2" => ["#{@reference}"] do
 end
 file "#{@reference}.rev.1.bt2" => ["#{@reference}"] do
 end
 file "#{@reference}.rev.2.bt2" => ["#{@reference}"] do
 end

 task :run => ["#{@reference}.1.bt2", "#{@reference}.2.bt2", "#{@reference}.3.bt2", "#{@reference}.4.bt2", "#{@reference}.rev.1.bt2", "#{@reference}.rev.2.bt2" ] do
   puts "Bowtie reference indexing completed"
 end
end

namespace :Bowtie do


 file "results/#{@sample}/#{@sampleid}_aligned.sam" => ["#{@reference}", "results/#{@sample}/#{@R1_basename}.fastq"] do
  sh "source bowtie2-2.1.0; bowtie2 -q --phred33 -k 1 --reorder --very-sensitive-local --no-unal --rg-id #{@sampleid} --rg \"platform:Illumina\" --no-unal -x #{@reference} -U  results/#{@sample}/#{@R1_basename}.fastq -S results/#{@sample}/#{@sampleid}_aligned.sam 2> results/#{@sample}/#{@sampleid}_aligned.log; "
 end

 file "results/#{@sample}/#{@sampleid}_aligned.bam" => ["samtools:indexreference", "results/#{@sample}/#{@sampleid}_aligned.sam"] do
   sh "source samtools-1.3.1; samtools view -bS -t #{@reference}.dict -o results/#{@sample}/#{@sampleid}_aligned.bam results/#{@sample}/#{@sampleid}_aligned.sam"
 end

 file "results/#{@sample}/#{@sampleid}_paired_aligned.sam" => ["#{@reference}", "results/#{@sample}/#{@R1_basename}_paired.fastq",  "results/#{@sample}/#{@R2_basename}_paired.fastq"] do
  sh "source bowtie2-2.1.0; bowtie2 -q --phred33 -k 1 --reorder --very-sensitive-local --no-unal --rg-id #{@sampleid} --rg \"platform:Illumina\" --no-unal -x #{@reference} -1 results/#{@sample}/#{@R1_basename}_paired.fastq -2 results/#{@sample}/#{@R2_basename}_paired.fastq -S results/#{@sample}/#{@sampleid}_paired_aligned.sam 2> results/#{@sample}/#{@sampleid}_aligned.log; "
 end

 file "results/#{@sample}/#{@sampleid}_paired_aligned.bam" => ["samtools:indexreference", "results/#{@sample}/#{@sampleid}_paired_aligned.sam" ] do
   sh "source samtools-1.3.1; samtools view -bS -t #{@reference}.dict -o results/#{@sample}/#{@sampleid}_paired_aligned.bam results/#{@sample}/#{@sampleid}_paired_aligned.sam"
 end



 task :runSE => ["BowtieIndex:run", "results/#{@sample}/#{@sampleid}_aligned.sam", "results/#{@sample}/#{@sampleid}_aligned.bam" ] do
   puts "Bowtie mapping completed"
 end

 task :runPE => ["BowtieIndex:run", "results/#{@sample}/#{@sampleid}_paired_aligned.sam", "results/#{@sample}/#{@sampleid}_paired_aligned.bam"] do
   puts "Bowtie mapping completed"
 end

 directory "results/#{@sampleid}"

 file "results/#{@sampleid}/aligned_merged.bam" => ["convert_sam_to_bam", "results/#{@sampleid}" ] do
   sh "source samtools-1.3.1; samtools merge -r -f -c --reference #{@reference} results/#{@sampleid}/aligned_merged.bam `echo results/#{@sampleid}_*/#{@sampleid}*aligned.bam`"
 end
 file "results/#{@sampleid}/aligned_merged_sorted.bam" => ["results/#{@sampleid}/aligned_merged.bam"] do
   sh "source samtools-1.3.1; samtools sort --reference #{@reference} -o results/#{@sampleid}/aligned_merged_sorted.bam results/#{@sampleid}/aligned_merged.bam"
 end
 file "results/#{@sampleid}/aligned_merged_sorted.bam.bai" => ["results/#{@sampleid}/aligned_merged_sorted.bam"] do
   sh "source samtools-1.3.1; samtools index -b results/#{@sampleid}/aligned_merged_sorted.bam results/#{@sampleid}/aligned_merged_sorted.bam.bai"
 end
 task :multi_bam_merge => ["results/#{@sampleid}/aligned_merged.bam"]
 task :multi_bam_sort => ["results/#{@sampleid}/aligned_merged_sorted.bam"]
 task :multi_bam_index => ["results/#{@sampleid}/aligned_merged_sorted.bam.bai"]

 desc "Merge, Sort and Index multiple samples after Tophat mapping"
 task :multisample => ["multi_bam_merge", "multi_bam_sort", "multi_bam_index"]

end

namespace :samtools do
  desc "create dict of reference"

  file "#{@reference}.dict" => ["#{@reference}"] do
    sh "source samtools-1.3.1; samtools dict #{@reference} > #{@reference}.dict"
  end
  desc "Index the reference sequence"
  file "#{@reference}.fai" => ["#{@reference}"] do
    sh "source samtools-1.3.1; samtools faidx #{@reference} > #{@reference}.fai"
  end
  desc "convert sam to bam"
  file "results/#{@sample}/#{@sampleid}_aligned.bam" => ["#{@reference}.dict", "#{@reference}.fai"] do
    sh "source samtools-1.3.1; samtools view -bS -t #{@reference}.dict -o results/#{@sample}/#{@sampleid}_aligned.bam results/#{@sample}/#{@sampleid}_aligned.sam "
  end

  desc "sort BAM file"
  file "results/#{@sample}/#{@sampleid}_alignedSorted.bam" => ["results/#{@sample}/#{@sampleid}_aligned.bam"] do
    sh "source samtools-1.3.1; samtools sort results/#{@sample}/#{@sampleid}_aligned.bam > results/#{@sample}/#{@sampleid}_alignedSorted.bam"
  end

  desc "Index BAM file"
  file "results/#{@sample}/#{@sampleid}_alignedSorted.bam.bai" => ["results/#{@sample}/#{@sampleid}_alignedSorted.bam"] do
    sh "source samtools-1.3.1; samtools index -b results/#{@sample}/#{@sampleid}_alignedSorted.bam > results/#{@sample}/#{@sampleid}_alignedSorted.bam.bai"
  end


  desc "create mpileup from the bam file"
  file "results/#{@sample}/#{@sampleid}.bcf" => ["results/#{@sample}/#{@sampleid}_alignedSorted.bam.bai", "#{@reference}"] do
    sh "source samtools-1.3.1; samtools mpileup --skip-indels  -d 250 -m 1 -E --BCF -f #{@reference} --output results/#{@sample}/#{@sampleid}.bcf results/#{@sample}/#{@sampleid}_alignedSorted.bam"
 end

 file "results/#{@sample}/#{@sampleid}_indexed.bcf" => ["results/#{@sample}/#{@sampleid}.bcf"] do
   sh "source bcftools-1.3.1; bcftools index results/#{@sample}/#{@sampleid}.bcf results/#{@sample}/#{@sampleid}_indexed.bcf>"
 end


  task :run => ["results/#{@sample}/#{@sampleid}_indexed.bcf"] do
    puts "Generating sambam and bedcoverage completed"
  end

end

namespace :vcf do
  file "results/#{@sample}/#{@sampleid}_snps.vcf" => "results/#{@sample}/#{@sampleid}_indexed.bcf" do
    sh "source bcftools-1.3.1; bcftools call --skip-variants indels --multiallelic-caller --variants-only  -O v -o results/#{@sample}/#{@sampleid}_snps.vcf results/#{@sample}/#{@sampleid}.bcf"
  end
  task :run => "results/#{@sample}/#{@sampleid}_snps.vcf" do
    puts "SNPs call completed "
  end
end

task :run_pipeline => [ "fastqc:run", "trimmomatic:run", "Bowtie:run", "samtools:run", "vcf:run"] do
  puts "Pipeline completed"
end

task :default => [ "fastqc:run", "trimmomatic:run", "Bowtie:run", "samtools:run", "vcf:run"] do
  puts "Pipeline completed"
end
